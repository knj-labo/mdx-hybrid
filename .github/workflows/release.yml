name: Release

on:
  push:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm release
          version: pnpm version
          commit: 'chore: version packages'
          title: 'chore: version packages'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get published version
        id: get-version
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Extract version from published packages
          PUBLISHED_PACKAGES='${{ steps.changesets.outputs.publishedPackages }}'
          VERSION=$(echo "$PUBLISHED_PACKAGES" | jq -r '.[] | select(.name == "@jp-knj/mdx-hybrid-engine-rust") | .version' || echo "")
          
          # If rust engine wasn't published, get its current version
          if [ -z "$VERSION" ]; then
            VERSION=$(node -p "require('./packages/engines/rust/package.json').version")
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Published version: $VERSION"

  publish-binaries:
    name: Trigger binary publishing
    needs: release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get rust engine version
        id: get-version
        run: |
          VERSION=$(node -p "require('./packages/engines/rust/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Trigger binary builds workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'publish-binaries.yml',
              ref: 'main',
              inputs: {
                version: '${{ steps.get-version.outputs.version }}'
              }
            })